#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import subprocess
from libnmap.process import NmapProcess
from libnmap.parser import NmapParser, NmapParserException


iprange = [x for x in range(1,255)]


def scan_sweep(netRange):
    ipUprange = []
    devnulls=open(os.devnull, 'w')
    for i in netRange:
        response = subprocess.call(["ping -c 1 10.0.0." + str(i)], stdout=devnulls, stderr=devnulls, shell=True)
        if response == 0:
            ipUprange.append("10.0.0." + str(i))
    return ipUprange



def do_scan(targets, options):
    parsed = None
    nmproc = NmapProcess(targets, options)
    rc = nmproc.run()
    if rc !=0:
        print("Scan Failed: {0}".format(nmproc.stderr))
    print(type(nmproc.stdout))

    try:
        parsed = NmapParser.parse(nmproc.stdout)
    except NmapParserException as e:
        print("Exception raised while parsing scan: {0}".format(e.msg))

    return parsed

def print_scan(nmap_report):
    print("Starting Nmap {0} at {1}".format(
        nmap_report.version,
        nmap_report.started))

    for host in nmap_report.hosts:
        if len(host.hostnames):
            tmp_host = host.hostnames.pop()
        else:
            tmp_host = host.address

        print("Nmap Scan Report for {0} ({1})".format(
            tmp_host,
            host.address))
        print("Host is {0}.".format(host.status))
        print("  PORT     STATE         SERVICE")

        for serv in host.services:
            pserv = "{0:>5s}/{1:3s}  {2:12s}  {3}".format(
                    str(serv.port),
                    serv.protocol,
                    serv.state,
                    serv.service)
            if len(serv.banner):
                pserv+=" ({0})".format(serv.banner)
            print(pserv)
    print(nmap_report.summary)


if __name__ == "__main__":
    ipFull = scan_sweep(iprange)

    report = do_scan(ipFull, "-sV --top-ports 10")
    if report:
        print_scan(report)
    else:
        print("No Results")
